#!/usr/bin/env node

/**
 * Create a distribution of MMT-Operator
 * Move a distribution to /opt/mmt/operator/
 * 	and create a daemon operator_d
 */

const config = require("../config.json"),
    fs = require("fs"),
    path = require("path"),
    cp = require('child_process'),
    util = require("util"),
    os = require("os"),
    moment = require('moment'),
    CleanCSS = require('clean-css'),
    UglifyJS = require("uglify-es"),
      
    VERSION = require("../version.json"),
    PLATFORM = os.platform(),
    DIST_FOLDER = "operator",
    BASE_PATH = path.join(__dirname, '..', "dist"),
    DIST_PATH = path.join(BASE_PATH, DIST_FOLDER);

function log(msg, level) {
    level = level || 0;
    var str = "";
    for (var i = 0; i < level; i++)
        str += "  ";
    console.log(str + "==> " + msg);
}

/*
 * create a folder, ok when it exists
 */
function mkdir(folder, callback) {
    cp.exec("mkdir -p " + folder, function (err) {
        //other than folder exists
        if (err && err.code != "EEXIST")
            return console.error(JSON.stringify(err));
        if (callback)
            callback();
    });
}

function copy(src, dst, callback) {
    cp.exec("cp -r " + src + " " + dst, function (err) {
        if (err) return console.error(err);
        if (callback)
            callback(src);
    })
}

function remove(file, callback) {
    cp.exec("rm -rf " + file, function (err) {
        if (err) return console.error(err);
        if (callback)
            callback(file);
    })
}

function copy_folder(folder_path_arr, callback) {
    var folder_path = path.join.apply(path, folder_path_arr),
        src_folder = path.join(__dirname, "..", folder_path),
        dst_folder = path.join(DIST_PATH, folder_path, "..");
    mkdir(dst_folder, function () {
        copy(src_folder, dst_folder, callback);
    })
}

function process_file(file_path_arr, file_name, proc_fun) {
    proc_fun = proc_fun || function (str) {
        return str;
    }

    var file_path = path.join.apply(path, file_path_arr),
        src_file = path.join(__dirname, "..", file_path, file_name),
        dst_file = path.join(DIST_PATH, file_path, file_name);

    //read file
    fs.readFile(src_file, {
        encoding: 'utf8'
    }, function (err, content) {
        if (err) return console.error(err);

        //create destionation folder if need
        mkdir(path.join(dst_file, ".."), function () {
            //modify the content if need
            content = proc_fun(content, file_name);
            //write to dist folder
            if (content != undefined)
                fs.writeFileSync(dst_file, content);
        })
    });
}

function process_dir(dir_arr, proc_fun) {

    var dir_path = path.join.apply(path, dir_arr);
    dir_path = path.join(__dirname, "..", dir_path);

    var files = fs.readdirSync(dir_path);

    var ignore_folders = ["node_modules", "lib", "test", "test-cases", "dist"]

    for (var i = 0; i < files.length; i++) {
        var file_name = files[i];
        var stat = fs.statSync(path.join(dir_path, file_name));
        if (stat.isFile())
            process_file(dir_arr, file_name, proc_fun);
        else if (stat.isDirectory() && ignore_folders.indexOf(file_name) == -1)
            process_dir(dir_arr.concat(file_name), proc_fun);
    }
}

function process_dirs() {
    var proc_fun = arguments[arguments.length - 1];
    for (var i = 0; i < arguments.length - 1; i++)
        process_dir(arguments[i], proc_fun);
}



const SERVICE_FILE = "/etc/systemd/system/mmt-operator.service";

function build(built_type) {
   if( fs.existsSync(DIST_PATH) )
      cp.execSync("rm -rf " + DIST_PATH );
   
   mkdir(DIST_PATH, function () {
      //minify css
      process_dirs(["public", "css"], function (content, file) {
         if (path.extname(file) != ".css")
            return;
         log("minify css: " + file);
         return new CleanCSS().minify(content).styles;
      });

      //minify javascript
      var includeArr = ["www", "build"];

      process_dirs(["."],
            function (content, file) {
         try {
            if (includeArr.indexOf(file) == -1 && path.extname(file) != ".js")
               return;

            //exclude
            if( ["tab.network.js"].indexOf( file ) != -1 )
               return content;

            log("minify javascript: " + file);
            var ret = UglifyJS.minify(content, {
               output:{
                  beautify: false,
                  preamble: "/* Montimage all Rights Reserved. "+ config.version +"*/"
               }
            });
            if( ret.error )
               throw ret.error;
            
            return ret.code;
         } catch (err) {
            console.error("Error when minify [" + file + "], use plain text: " + err.toString());
            return content;
         }
      }
      );

      //beautify JSON
      process_dirs(["."],
            function (content, file) {
         if (path.extname(file) != ".json")
            return;
         log("beautify json: " + file);
         var ret = JSON.parse(content);
         return JSON.stringify(ret, null, "  ");
      });


      var copy_msg = function (file) {
         log("copy folder: " + file);
      }
      copy_folder(["data"], copy_msg);
      copy_folder(["node_modules"], copy_msg);
      copy_folder(["public", "lib"], copy_msg);
      copy_folder(["public", "img"], copy_msg);
      copy_folder(["views"], copy_msg);
      copy_folder(["public/favicon.ico"]);


      //Compressing output
      process.on('exit', function () {
         const NAME = "mmt-operator_" + VERSION.VERSION_NUMBER + "_" + VERSION.VERSION_HASH + "_" + moment().format("YYYY-MM-DD");
         var command_str = "";
         if (built_type == "tar") {
            console.log("Compressing ... " + NAME);
            command_str = "tar -czf " + NAME + ".tar.gz " + DIST_FOLDER;

            console.log(command_str);
            cp.execSync(command_str, { cwd: BASE_PATH });
         }else if( built_type == "deb" || built_type == "rpm" ){

            var  DEB_PATH = path.join( BASE_PATH, NAME );
            //clean the build folder if it is existing
            if( fs.existsSync(DEB_PATH) )
               cp.execSync( "rm -rf "   + DEB_PATH );
            
            var OP_PATH = path.join( DEB_PATH, "opt", "mmt");
            cp.execSync( "mkdir -p " + OP_PATH );
            
            //copy source
            cp.execSync("mv " + DIST_PATH + " " + OP_PATH );

            cp.execSync( "chmod +x " + path.join( OP_PATH, "operator", "bin", "www" ) );
            //create symbol link mmt-operator to /opt/mmt/operator/bin/www
            cp.execSync( "mkdir -p " + path.join( DEB_PATH, "usr", "bin" ) );
            cp.execSync( "ln -s /opt/mmt/operator/bin/www " + path.join( DEB_PATH, "usr", "bin", "mmt-operator" ) );
            
            //Set MMT-Operator as service
            var daemon_file  = path.join(__dirname, "..", "mmt-operator.service");
            var service_file = path.join( DEB_PATH, SERVICE_FILE ); //target file
            cp.execSync( "mkdir -p " + path.dirname( service_file ) ); //create folder containing the service file
            cp.execSync( "cp " + daemon_file + " " + service_file );
            cp.execSync( "chmod +x " + service_file );
            
            if( built_type == "deb" ){
               //create DEBIAN folder
               cp.execSync( "mkdir -p " + path.join( DEB_PATH, "DEBIAN" ) );
               
               //the script will be executed after installing the deb file
               var postinst_file = path.join( DEB_PATH, "DEBIAN", "postinst" );
               fs.writeFileSync( postinst_file, "systemctl daemon-reload" );
               cp.execSync( "chmod +x " + postinst_file );
               
               //create DEBIAN/control file
               fs.writeFileSync( path.join( DEB_PATH, "DEBIAN", "control"),
                     "Package: mmt-operator" +
                     "\nVersion: " + VERSION.VERSION_NUMBER +
                     "\nSection: base" +
                     "\nPriority: standard" +
                     "\nArchitecture: all" +
                     "\nMaintainer: Montimage <contact@montimage.com>" +
                     "\nDescription: MMT-Operator: An Web application to visualize MMT meta-data" +
                     "\n  Version id: " + VERSION.VERSION_HASH + ". Build time: " + moment().format("YYYY-MM-DD HH:mm:SS") +
                     "\nHomepage: http://www.montimage.com\n"
               );

               log("create " + NAME + ".deb")
               cp.execSync("chmod 0775 " + NAME, { cwd: BASE_PATH });
               
               //create deb file
               cp.execSync("dpkg-deb -b " + NAME, { cwd: BASE_PATH });
               //delete source folder
               log("delete source folder")
               cp.execSync("rm -rf " + NAME, { cwd: BASE_PATH } );
            }else if( built_type == "rpm" ){

               log("create " + NAME + ".rpm")

               fs.writeFileSync( "mmt.spec",
                     "Summary:  MMT-Operator" +
                     "\nName: mmt-operator" +
                     "\nVersion: " + VERSION.VERSION_NUMBER +
                     "\nRelease: " + VERSION.VERSION_HASH +
                     "\nLicense: proprietary" +
                     "\nGroup: Development/Tools" +
                     "\nURL: http://montimage.com/" +
                     "\n" +
                     "\nBuildRoot: %{_topdir}/BUILD/%{name}-%{version}-%{release}" +
                     "\n" +
                     "\n%description" +
                     "\nMMT-Operator is a tool for visualisation results of MMT-Probe." +
                     "\nBuild date: " + moment().format("YYYY-MM-DD HH:mm:SS") +
                     "\n" +
                     "\n%prep" +
                     "\nrm -rf %{buildroot}" +
                     "\nmkdir -p %{buildroot}/" +
                     "\nmv "+ DEB_PATH +"/*  %{buildroot}/" +
                     "\n" +
                     "\n%clean" +
                     "\nrm -rf %{buildroot}" +
                     "\n" +
                     "\n%files" +
                     "\n%defattr(-,root,root,-)" +
                     "\n/opt/mmt/operator/*" +
                     "\n/usr/bin/mmt-operator" +
                     "\n%post" +
                     "\nldconfig"
               );
               const rpmDir = path.join( BASE_PATH, "rpmbuild" );
               cp.execSync( "mkdir -p "+ rpmDir +"/{RPMS,BUILD}" );
               cp.execSync('rpmbuild --quiet --rmspec --define "_topdir '+ rpmDir +'" --define "_rpmfilename ../../'+ NAME +'.rpm" -bb ./mmt.spec');
               cp.execSync( "rm -rf " + rpmDir + " " + DEB_PATH );
            }
         }

               //else
             //   console.log("Unknow build type: " + built_type );



            console.log("\nA distribution of MMT-Operator is located at " + BASE_PATH );

        });

    }); //end mkdir( DIST_PATH)
}

function install() {
    if (PLATFORM != "linux")
        return console.error("Install for Linux platform only.");
    if( ! fs.existsSync(DIST_PATH) )
        return console.error("Do firstly 'npm run build'");

    log("Install MMT-Operator at /opt/mmt/operator");
    mkdir("/opt/mmt", function () {
        copy(DIST_PATH, " /opt/mmt/", function () {
            log("Set MMT-Operator as service");
            var daemon_file = path.join(__dirname, "..", "mmt-operator.service");
            copy(daemon_file, SERVICE_FILE, function () {
                cp.exec("chmod +x " + SERVICE_FILE + " && systemctl daemon-reload", function (err) {
                    if (err) return console.error(err);
                    console.log("now you can use MMT-Operator using the commands:\n sudo systemctl start|stop|restart|status mmt-operator");
                    console.log("the config file is located at /opt/mmt/operator/config.json");
                    console.log("");
                })
            })
        })
    });
}

function dist_clean() {
    log("Remove MMT-Operator")
    remove("/opt/mmt/operator", function () {
        remove(SERVICE_FILE, function () {
            log("Done", 1);
        })
    })
}


var action = "";
if (process.argv.length > 2)
    action = process.argv[2];

switch( action ){
case "build":
    build("");
    break;
case "tar":
    build("tar");
    break;
case "install":
    install();
    break;
case "dist-clean":
    dist_clean();
    break;
case "deb": 
    build("deb");
    break;
case "rpm":
    build("rpm");
    break;
default:
    console.error("Unknown action: " + action);
}