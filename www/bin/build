#!/usr/bin/env node

/**
 * Create a distribution of MMT-Operator
 * Move a distribution to /opt/mmt/operator/
 * 	and create a daemon operator_d
 */

const config = require("../config.json"),
    fs = require("fs"),
    path = require("path"),
    cp = require('child_process'),
    util = require("util"),
    os = require("os"),
    moment = require('moment'),
    CleanCSS = require('clean-css'),
    UglifyJS = require("uglify-js"),
      
    VERSION = require("../version.json"),
    PLATFORM = os.platform(),
    DIST_FOLDER = "operator",
    BASE_PATH = path.join(__dirname, '..', "dist"),
    DIST_PATH = path.join(BASE_PATH, DIST_FOLDER);

function log(msg, level) {
    level = level || 0;
    var str = "";
    for (var i = 0; i < level; i++)
        str += "  ";
    console.log(str + "==> " + msg);
}

/*
 * create a folder, ok when it exists
 */
function mkdir(folder, callback) {
    cp.exec("mkdir -p " + folder, function (err) {
        //other than folder exists
        if (err && err.code != "EEXIST")
            return console.error(JSON.stringify(err));
        if (callback)
            callback();
    });
}

function copy(src, dst, callback) {
    cp.exec("cp -r " + src + " " + dst, function (err) {
        if (err) return console.error(err);
        if (callback)
            callback(src);
    })
}

function remove(file, callback) {
    cp.exec("rm -rf " + file, function (err) {
        if (err) return console.error(err);
        if (callback)
            callback(file);
    })
}

function copy_folder(folder_path_arr, callback) {
    var folder_path = path.join.apply(path, folder_path_arr),
        src_folder = path.join(__dirname, "..", folder_path),
        dst_folder = path.join(DIST_PATH, folder_path, "..");
    mkdir(dst_folder, function () {
        copy(src_folder, dst_folder, callback);
    })
}

function process_file(file_path_arr, file_name, proc_fun) {
    proc_fun = proc_fun || function (str) {
        return str;
    }

    var file_path = path.join.apply(path, file_path_arr),
        src_file = path.join(__dirname, "..", file_path, file_name),
        dst_file = path.join(DIST_PATH, file_path, file_name);

    //read file
    fs.readFile(src_file, {
        encoding: 'utf8'
    }, function (err, content) {
        if (err) return console.error(err);

        //create destionation folder if need
        mkdir(path.join(dst_file, ".."), function () {
            //modify the content if need
            content = proc_fun(content, file_name);
            //write to dist folder
            if (content != undefined)
                fs.writeFile(dst_file, content);
        })
    });
}

function process_dir(dir_arr, proc_fun) {

    var dir_path = path.join.apply(path, dir_arr);
    dir_path = path.join(__dirname, "..", dir_path);

    var files = fs.readdirSync(dir_path);

    var ignore_folders = ["node_modules", "lib", "test", "test-cases", "dist"]

    for (var i = 0; i < files.length; i++) {
        var file_name = files[i];
        var stat = fs.statSync(path.join(dir_path, file_name));
        if (stat.isFile())
            process_file(dir_arr, file_name, proc_fun);
        else if (stat.isDirectory() && ignore_folders.indexOf(file_name) == -1)
            process_dir(dir_arr.concat(file_name), proc_fun);
    }
}

function process_dirs() {
    var proc_fun = arguments[arguments.length - 1];
    for (var i = 0; i < arguments.length - 1; i++)
        process_dir(arguments[i], proc_fun);
}




function build(built_type) {
    mkdir(DIST_PATH, function () {
        //minify css
        process_file(["public", "css"], "style.css", function (content, file) {
            log("minify css: " + file);
            return new CleanCSS().minify(content).styles;
        });

        //minify javascript
        var includeArr = ["www", "build"];

        process_dirs(["."],
            function (content, file) {
                try {
                    if (includeArr.indexOf(file) == -1 && path.extname(file) != ".js")
                        return;
                        
                    //exclude
                    if( ["tab.network.js"].indexOf( file ) != -1 )
                        return content;
                        
                    log("minify javascript: " + file);
                    var ret = UglifyJS.minify(content, {
                        fromString: true
                    });
                    return ret.code;
                } catch (err) {
                    console.error("Error when minify [" + file + "]: " + err.toString());
                }
            }
        );

        //beautify JSON
        process_dirs(["."],
            function (content, file) {
                if (path.extname(file) != ".json")
                    return;
                log("beautify json: " + file);
                var ret = JSON.parse(content);
                return JSON.stringify(ret, null, "  ");
            });


        var copy_msg = function (file) {
            log("copy folder: " + file);
        }
        copy_folder(["data"], copy_msg);
        copy_folder(["node_modules"], copy_msg);
        copy_folder(["public", "lib"], copy_msg);
        copy_folder(["public", "img"], copy_msg);
        copy_folder(["views"], copy_msg);
        copy_folder(["public/favicon.ico"]);


        //Compressing output
        process.on('exit', function () {
            const NAME = "mmt-operator_" + VERSION.VERSION_NUMBER + "_" + VERSION.VERSION_HASH + "_" + moment().format("YYYY-MM-DD");
            var command_str = "";
            if (built_type == "tar") {
                console.log("Compressing ... " + NAME);
                command_str = "tar -czf " + NAME + ".tar.gz " + DIST_FOLDER;
                
                console.log(command_str);
                cp.execSync(command_str, { cwd: BASE_PATH });
            }else{
                const  DEB_PATH = path.join( BASE_PATH, NAME ),
                        OP_PATH = path.join( DEB_PATH, "opt", "mmt");
                cp.execSync( "mkdir -p " + OP_PATH );

                //create DEBIAN/control file
                cp.execSync( "mkdir -p " + path.join( DEB_PATH, "DEBIAN" ) );
                fs.writeFileSync( path.join( DEB_PATH, "DEBIAN", "control"),
                    "Package: mmt-operator" +
                    "\nVersion: " + VERSION.VERSION_NUMBER +
                    "\nDepends: nodejs" +
                    "\nSection: base" +
                    "\nPriority: standard" +
                    "\nArchitecture: all" +
                    "\nMaintainer: Montimage <contact@montimage.com>" +
                    "\nDescription: MMT-Operator: An Web application to visualize MMT meta-data" +
                    "\n  Version id: " + VERSION.VERSION_HASH + ". Build time: " + moment().format("YYYY-MM-DD HH:mm:SS") +
                    "\nHomepage: http://www.montimage.com\n"
                );
                
                //copy source
                cp.execSync("mv " + DIST_PATH + " " + OP_PATH );
                
                cp.execSync( "chmod +x " + path.join( OP_PATH, "operator", "bin", "www" ) );
                //create symbol link mmt-operator to /opt/mmt/operator/bin/www
                cp.execSync( "mkdir -p " + path.join( DEB_PATH, "usr", "bin" ) );
                cp.execSync( "ln -s /opt/mmt/operator/bin/www " + path.join( DEB_PATH, "usr", "bin", "mmt-operator" ) );
                
                log("create " + NAME + ".deb")
                //create deb file
                cp.execSync("dpkg-deb -b " + NAME, { cwd: BASE_PATH });
                //delete source folder
                log("delete source folder")
                cp.execSync("rm -rf " + NAME );
            }



            console.log("\nA distribution of MMT-Operator is located at " + BASE_PATH );

        });

    }); //end mkdir( DIST_PATH)
}




function install() {
    if (PLATFORM != "linux")
        return console.log("Install for Linux platform only.");

    log("Install MMT-Operator at /opt/mmt/operator");
    mkdir("/opt/mmt", function () {
        copy(DIST_PATH, " /opt/mmt/", function () {
            log("Set MMT-Operator as service");
            var daemon_file = path.join(__dirname, "..", "daemon.sh");
            copy(daemon_file, "/etc/init.d/operator_d", function () {
                cp.exec("chmod +x " + daemon_file, function (err) {
                    if (err) return console.error(err);
                    console.log("now you can use MMT-Operator using the commands:\n sudo service operator_d start|stop|restart|status");
                    console.log("the config file is located at /opt/mmt/operator/config.json");
                    console.log("");
                })
            })
        })
    });
}

function dist_clean() {
    log("Remove MMT-Operator")
    remove("/opt/mmt/operator", function () {
        remove("/etc/init.d/operator_d", function () {
            log("Done", 1);
        })
    })
}


var action = "";
if (process.argv.length > 2)
    action = process.argv[2];


if (action == "build")
    build("tar");
else if (action == "install") {
    install();
} else if (action == "dist-clean")
    dist_clean();
else if (action == "deb") {
    build("deb");
} else
    console.error("Usage: " + process.argv[0] + " " + process.argv[1] + " build|dist-clean|install\n");