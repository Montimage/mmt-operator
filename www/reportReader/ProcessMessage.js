/**
 *  
 */

"use strict";
const mmtAdaptor  = require('../libs/dataAdaptor');
const config      = require('../libs/config');
const ip2loc      = require('../libs/ip2loc');
const DataBase    = require("./DataBase.js");
const COL         = mmtAdaptor.StatsColumnId;
const s1apTopo    = require("./EnodebTopo");

//DONOT remove this block
//this is for sending data to web clients vi socketio
var caches = {};
function saveToDatabase( channel, msg ){
	if( caches[ channel ] === undefined )
		caches[ channel ] = [];
	//add msg to caches
	//caches will be verified each seconds and sent to client
	//caches[ channel ].push( msg );
}

function _saveToDB( collectionName, dataArr ){
   inserterDB.set( collectionName, 0, dataArr );
}

setInterval( function(){
	for( const channel in caches ){
		const cache = caches[ channel ];
		//no data in this cache
		if( cache.length === 0 )
			continue;
		//avg
		if (channel === "qos" ){
			for( let j=1; j<cache.length; j++)
				for( let i=4; i<13;i++ )
					cache[0][i] += cache[j][i];

			for( let i=4; i<13;i++ )
				if( i !== 9 || i !== 10 )
					cache[0][i] /= cache.length;

			//router.socketio.emit( "qos", cache[0] );
		}else {
		   //broadcast a message to Web browsers using socketio
		   _saveToDB( "cache_" + channel, cache );
		}

		//reset this cache to zero
		caches[ channel ] = [];
	}
}, 1000);
//end caches



function ProcessMessage( database ){
	const self       = this;
	const _database  = database; 
	
	/**
	 * Process a message report generated by MMT-Probe:
	 * 	- insert the message to DB
	 *  - send it directly to Web client if need
	 * @param message
	 * @returns
	 */
	self.process = function( message ) {
		//console.log( message );
		//message = message.replace(/\(null\)/g, 'null');
		var msg;
		//report is a JSON array ???
		if( message.charAt(0) == '[' )
		   msg = mmtAdaptor.formatMessage( message );
		else //report is a CSV line
		   msg = mmtAdaptor.formatMessage( '[' + message + ']' );

		if( msg === null )
			return;

		//For each kind of message
		switch( msg[0] ){
		/*
        case mmtAdaptor.CsvFormat.NO_SESSION_STATS_FORMAT:
            if( config.only_ip_session === true ){
                //console.log( message );
                return;
            }
            break;
		 */
			//does not use these kind of reports
			/*
		case mmtAdaptor.CsvFormat.DEFAULT_APP_FORMAT:
		case mmtAdaptor.CsvFormat.WEB_APP_FORMAT:
		case mmtAdaptor.CsvFormat.SSL_APP_FORMAT:
			return;
			 */

			//behaviour: changing bandwidth
//		case mmtAdaptor.CsvFormat.BA_BANDWIDTH_FORMAT:
//			break;
//		case mmtAdaptor.CsvFormat.BA_PROFILE_FORMAT:
//			break;

			//license information
//		case mmtAdaptor.CsvFormat.LICENSE:
//			//if( typeof databaseadmin )
//			//	databaseadmin.insertLicense( mmtAdaptor.formatReportItem( msg ));
//			break;
		//report is sent only once when starting up	
		case mmtAdaptor.CsvFormat.STARTUP_REPORT:
		   s1apTopo.resetTopology( msg );
		   break;

		case mmtAdaptor.CsvFormat.LTE_TOPOLOGY_REPORT:
		   s1apTopo.processMessage( msg );
		   break;
		   
			//Video QoS
		case mmtAdaptor.CsvFormat.OTT_QOS:
			//send_to_client( "qos", msg );
			break;
			//Security alerts
		case mmtAdaptor.CsvFormat.SECURITY_FORMAT:
			//send_to_client( "security", msg );
			break;
			//availability
		//case 50:
		//   console.info( msg );
		}

		//TODO: to be remove, this chages probe ID, only for Thales demo
		//msg[1] = "Sodium";

		//to test mult-probe
		//msg[1] = Math.random() > 0.5 ? 1 : 0;

		//_TODO: re-enable this
		_database.add(msg, function (err, err_msg) {});
		msg = null;
	};
}

module.exports = ProcessMessage;