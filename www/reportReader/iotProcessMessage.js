const dataAdaptor = require('../libs/dataAdaptor');
const COL         = dataAdaptor.StatsColumnId;
const IOT         = dataAdaptor.IoTColumnId;

module.exports= {
	/**
		Currently (Aug 19, 2020), iot reports are generated by event reports
		event-report iot
		{
		    enable = true
		    event = "ieee802154.sequence_number" # Indicates the event:
		    attributes = {"ieee802154.src_address_extended", "ieee802154.dst_address_extended", "meta.packet_len"} # Indicates the list of attributes that are reported when a event is triggered:
		    output-channel = {socket} # see security.output-channel for more detailed information
		}
		For example:
		1000,3,"iot/fed4fire2020_07_20_10_22_56.pcap",1595242294.348448,"iot",209,5404319579506409490,5404319579365157837,102
		
		For now this kind of reports and IP session reports are not existed in the same time
		=> we will transform this kind of reports to IP session reports
		to be able to reuse some existing dashboard
	*/
	processMessage: function( msg ){
		const newMsg = [];
		for( let i in COL )
			newMsg[i] = "";

		newMsg[COL.FORMAT_ID]      = dataAdaptor.CsvFormat.SESSION_STATS_FORMAT;
		newMsg[COL.APP_ID]         = 800;
		newMsg[COL.APP]            = "IEEE802154";
		newMsg[COL.APP_PATH]       = "800"; //"IEEE802154";
		//keep these values
		newMsg[COL.PROBE_ID]       = msg[IOT.PROBE_ID];
		newMsg[COL.SOURCE_ID]      = msg[IOT.SOURCE_ID];
		newMsg[COL.TIMESTAMP]      = msg[IOT.TIMESTAMP];
		newMsg[COL.IP_SRC]         = msg[IOT.SRC].toString();
		newMsg[COL.IP_DST]         = msg[IOT.DST].toString();
		newMsg[COL.DATA_VOLUME]    = msg[IOT.DATA_VOLUME];
		newMsg[COL.UL_DATA_VOLUME] = msg[IOT.DATA_VOLUME];
		newMsg[COL.PACKET_COUNT]   = newMsg[COL.UL_PACKET_COUNT] = 1;
		
		return newMsg;
	}
}